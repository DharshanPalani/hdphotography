---
import Layout from "../layouts/Layout.astro";

export const images = [
  {
    id: 0,
    src: "https://images.unsplash.com/photo-1519741497674-611481863552?w=800",
    category: "wedding",
    title: "Beach Wedding Ceremony",
    description: "A beautiful sunset ceremony by the ocean",
    full: "https://images.unsplash.com/photo-1519741497674-611481863552?w=1920",
    width: 1920,
    height: 1280,
  },
  {
    id: 1,
    src: "https://images.unsplash.com/photo-1537907690979-ee8e01276184?w=800",
    category: "portrait",
    title: "Golden Hour Portrait",
    description: "Natural light portrait photography",
    full: "https://images.unsplash.com/photo-1537907690979-ee8e01276184?w=1920",
    width: 1920,
    height: 1280,
  },
  {
    id: 2,
    src: "https://images.unsplash.com/photo-1511285560929-80b456fea0bc?w=800",
    category: "events",
    title: "Corporate Gala",
    description: "Annual tech conference keynote",
    full: "https://images.unsplash.com/photo-1511285560929-80b456fea0bc?w=1920",
    width: 1920,
    height: 1280,
  },
  {
    id: 3,
    src: "https://images.unsplash.com/photo-1606800052052-a08af7148866?w=800",
    category: "wedding",
    title: "Garden Reception",
    description: "Intimate outdoor wedding celebration",
    full: "https://images.unsplash.com/photo-1606800052052-a08af7148866?w=1920",
    width: 1920,
    height: 1280,
  },
  {
    id: 4,
    src: "https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=800",
    category: "portrait",
    title: "Studio Fashion",
    description: "Professional studio portrait session",
    full: "https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=1920",
    width: 1280,
    height: 1920,
  },
];
---

<Layout title="Showroom - Professional Photography">
  <main class="pt-20 bg-ivory dark:bg-gray-700">
    <section class="py-12">
      <div class="container mx-auto px-6">
        <h1
          class="text-4xl font-display text-center mb-12 text-brown dark:text-cream"
          data-aos="fade-up"
        >
          Our Portfolio
        </h1>

        <!-- Filters -->
        <div
          class="flex flex-wrap justify-center gap-4 mb-12"
          data-aos="fade-up"
        >
          <button
            class="filter-btn active px-8 py-3 rounded-full bg-darkRed text-brown font-medium transition-all duration-300 hover:shadow-lg hover:scale-105"
            data-filter="all"
          >
            All Work
          </button>
          <button
            class="filter-btn px-8 py-3 rounded-full bg-champagne dark:bg-brown text-brown dark:text-cream font-medium transition-all duration-300 hover:shadow-lg hover:scale-105"
            data-filter="wedding"
          >
            Wedding
          </button>
          <button
            class="filter-btn px-8 py-3 rounded-full bg-champagne dark:bg-brown text-brown dark:text-cream font-medium transition-all duration-300 hover:shadow-lg hover:scale-105"
            data-filter="portrait"
          >
            Portrait
          </button>
          <button
            class="filter-btn px-8 py-3 rounded-full bg-champagne dark:bg-brown text-brown dark:text-cream font-medium transition-all duration-300 hover:shadow-lg hover:scale-105"
            data-filter="events"
          >
            Events
          </button>
        </div>

        <!-- Gallery -->
        <div
          class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
          data-aos="fade-up"
        >
          {
            images.map((image, index) => (
              <div
                class="gallery-item cursor-pointer"
                data-category={image.category}
              >
                <div class="relative group cursor-pointer overflow-hidden rounded-xl">
                  <img
                    src={image.src}
                    alt={image.title}
                    data-full={image.full}
                    data-width={image.width}
                    data-height={image.height}
                    class="w-full aspect-[4/3] object-cover transform transition-all duration-700 group-hover:scale-110"
                  />
                  <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-500">
                    <div class="absolute bottom-0 left-0 right-0 p-6 transform translate-y-6 group-hover:translate-y-0 transition-transform duration-500">
                      <h3 class="text-white text-xl font-display mb-2">
                        {image.title}
                      </h3>
                      <p class="text-gray-200 text-sm">{image.description}</p>
                    </div>
                  </div>
                </div>
              </div>
            ))
          }
        </div>

        <div
          id="lightbox"
          class="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center hidden"
        >
          <!-- Frame Container -->
          <div
            class="relative bg-black rounded-lg shadow-xl w-[90vw] h-[90vw] sm:w-[80vw] sm:h-[80vh] max-w-[40rem] max-h-[80vh]"
          >
            <!-- Close Button -->
            <button
              class="absolute top-2 right-2 text-white text-3xl font-semibold hover:text-gray-400 z-10"
              id="lightboxCloseBtn"
            >
              &times;
            </button>

            <!-- Image Container -->
            <div
              class="w-full h-full flex justify-center items-center overflow-hidden rounded-md"
            >
              <!-- Image -->
              <img src="" alt="" class="w-full h-full object-cover" />
            </div>

            <!-- Description -->
            <div
              class="absolute bottom-2 w-full text-center text-white font-semibold text-base bg-black bg-opacity-60 py-1"
            >
              <p>Placeholder</p>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>
</Layout>

<script>
  import { on_load } from "../util/listener";
  import { images } from "./showroom.astro";

  on_load(() => {
    // Select all filter buttons and gallery items
    const filterBtns =
      document.querySelectorAll<HTMLButtonElement>(".filter-btn");
    const items = document.querySelectorAll<HTMLElement>(".gallery-item");

    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    const filter = urlParams.get("genre") || "all"; // Default to 'all'

    const lightbox = document.getElementById("lightbox");
    const lightboxCloseBtn = document.getElementById("lightboxCloseBtn");
    const lightboxImage = document
      .getElementById("lightbox")
      ?.getElementsByTagName("img")[0];

    applyFilter(filter, filterBtns, items);

    filterBtns.forEach((btn) => {
      btn.addEventListener("click", () => {
        applyFilter(btn.getAttribute("data-filter"), filterBtns, items);
      });
    });

    items.forEach((image, index) => {
      image.addEventListener("click", () => {
        openLightBox(index, lightbox, lightboxImage);
      });
    });

    lightboxCloseBtn.addEventListener("click", () => {
      lightbox.classList.add("hidden");
    });
  });

  function openLightBox(index, lightbox, lightboxImage) {
    if (!lightboxImage) {
      console.error("Image element not found in the lightbox!");
      return;
    }

    let chosenImage = images.find((image) => image.id === index);

    if (chosenImage) {
      lightboxImage.src = chosenImage.src;
    } else {
      console.error("Image not found for index:", index);
    }

    lightbox.classList.remove("hidden");
  }

  // Function to apply the filter
  function applyFilter(
    filter: string,
    filterBtns: NodeListOf<HTMLButtonElement>,
    items: NodeListOf<HTMLElement>
  ) {
    // Update button styles
    filterBtns.forEach((btn) => {
      const btnFilter = btn.getAttribute("data-filter");
      if (btnFilter === filter) {
        btn.classList.add("active", "bg-darkRed", "text-white");
        btn.classList.remove(
          "bg-champagne",
          "dark:bg-brown",
          "text-brown",
          "dark:text-cream"
        );
      } else {
        btn.classList.remove("active", "bg-darkRed", "text-white");
        btn.classList.add(
          "bg-champagne",
          "dark:bg-brown",
          "text-brown",
          "dark:text-cream"
        );
      }
    });

    // Show/Hide gallery items based on filter
    items.forEach((item) => {
      const category = item.getAttribute("data-category");
      if (filter === "all" || category === filter) {
        item.style.display = "block"; // Ensure 'item' is treated as an HTMLElement
        item.classList.remove("scale-0", "opacity-0");
        item.classList.add("scale-100", "opacity-100");
      } else {
        item.classList.add("scale-0", "opacity-0");
        item.style.display = "none"; // Same here
        // setTimeout(() => {
        // }, 300);
      }
    });

    const url = new URL(window.location.href);
    url.searchParams.set("genre", filter);

    window.history.pushState(null, "", url.toString());
  }
</script>

<style>
  .gallery-item {
    transition: all 0.3s ease-in-out;
  }
</style>
